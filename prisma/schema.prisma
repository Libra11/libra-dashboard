generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  roleId        String?
  role          Role?     @relation(fields: [roleId], references: [id])
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  users       User[]
  permissions Permission[]
  menus       Menu[]      @relation("RoleMenus")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  description String
  roles       Role[]
  menus       Menu[]   @relation("MenuPermissions")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("permissions")
}

model Menu {
  id          String       @id @default(cuid())
  name        String
  path        String
  icon        String?
  sort        Int         @default(0)
  parentId    String?
  parent      Menu?       @relation("MenuToMenu", fields: [parentId], references: [id])
  children    Menu[]      @relation("MenuToMenu")
  isVisible   Boolean     @default(true)
  isDynamic   Boolean     @default(false)
  dynamicName String      @default("id")
  roles       Role[]      @relation("RoleMenus")
  permissions Permission[] @relation("MenuPermissions")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("menus")
} 